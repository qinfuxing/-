#include<stdio.h>
int n;//物品的个数
int x[10000],bestx[10000];//x[i]暂存物品的选中情况,物品的选中情况
int a;//物品属性个数；
double  p[10000],c[10000],w[10000][10000],bestp;//物品的价值,背包的属性限制,物品的属性对应值,最大价值

int g(int k, int j,double cleft[]){
if(k>a)
return 1;
    else 
		if(w[k][j]<=cleft[k]){ // 当背包中物品的属性值都小于背包剩余属性值
	 return	g(k+1,j,cleft);
	    }
      else return 0;
}

//剪枝
double bound(int i,double cp,double cw[]){       //传入节点 i
 int b;
    //保存剩余的背包容量
    double cleft[100000];  
             for(b=1;b<=a;b++)   
                        cleft[b]=c[b]-cw[b];              //总属性容量 减去 当前已经装了的属性量  
    double tempv=cp,s=0;     //保存当前的价值 
	int j; 
    for( j=i;j<=n;j++){
        if(g(1,j,cleft)){
            tempv+=p[j];
            for(b=1;b<=a;b++)   
                        cleft[b]-=w[b][j]; 
           
         } else{
			for(b=1;b<=a;b++) 
                tempv+=p[j]/w[b][j]*cleft[b]  ;
		
	 break;
         }
     }
     return tempv;
} 


int f(int k,int j,int i,double cw[]){
if(k>a)
return 1;
else 
if(cw[k]+j*w[k][i]<=c[k]){//当背包装入的物品的属性值总和加上当前i结点的物品属性值小于背包最大的属性值时
 return f(k+1,j,i,cw);
}
else return 0;
}

void Backtrack(int i,double cp,double cw[])
{ //cw当前包内物品重量，cp当前包内物品价值
    int j,b,h;
    if(i>n)//回溯结束
    {
        if(cp>bestp)
        {
            bestp=cp;
        for(i=0;i<=n;i++)
            bestx[i]=x[i];
        }
    }
    else 
        for(j=0;j<=1;j++)  
        {
            x[i]=j;
      
            if(f(1,j,i,cw)){
				if(x[i]==1){//进入左子树l
           
                for(b=1;b<=a;b++)
                cw[b]+=w[b][i]*x[i];
                cp+=p[i]*x[i];
                Backtrack(i+1,cp,cw);
                for(h=1;h<=a;h++)
                cw[h]-=w[h][i]*x[i];
                cp-=p[i]*x[i];}
           
        
            else
	        if (bound(i+1,cp,cw)>bestp){      
	 //后续节点的价值上界大于当前最优价值，则可以进入右结点  
	 //否则最优的都小于或等于当前的 就没必要再进入右节点 
                Backtrack(i+1,cp,cw); }             
		//进入右节点 因为不加入到背包 故 当前的价值 属性值 都不发生改变 
			}

}  
}

void main()
{
    int i,j;
    bestp=0; 
    double v[10000];//开一个足够大的数组。
    int l=0,s;
    FILE *fp;//文件指针
    fp = fopen("C://222.txt", "r");//以文本方式打开文件。
    if(fp == NULL) //打开文件出错。
     {
    perror("fail to read");}
    while(fscanf(fp, "%lf", &v[l]) != EOF) //读取数据到数组，直到文件结尾(返回EOF)
    l++;
    fclose(fp);//关闭文件
    n=(int)v[0];//物品的个数
	a=(int)v[1];//物品属性个数
	s=0;
	for(i=3;i<=n+2;i++) {
		
        p[++s]=v[i];}
		for(i=1;i<=n;i++)
	printf("%.1lf ",p[i]);
	//s=6;
		s=s+2;
	printf("\n");
	for(j=1;j<=a;j++){
		for(i=1;i<=n;i++){
			w[j][i]=v[++s];
             //s=68
			printf("%.lf ",w[j][i]);}
		printf("\n");}
    for(i=1;i<=a;i++){
		c[i]=v[++s];
	printf("%.lf ",c[i]);}
		printf("\n");



    double cw[10000];
    for(i=1;i<=a;i++)
       cw[i]=0;
    Backtrack(1,0,cw);
    printf("最大价值为:\n");
    printf("%.1lf\n",bestp);
    printf("被选中的物品依次是(0表示未选中，1表示选中)\n");
    for(i=1;i<=n;i++) 
        printf("%d ",bestx[i]);
    printf("\n");

}
